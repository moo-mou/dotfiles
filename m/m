#!/home/moomou/.local/bin/m_venv3/bin/python
import glob
import importlib
import inspect
import json
import logging.config
import os
import pathlib as pl

import m_base
import simple_argparse as sa
from constant import M_ROOT

with open(os.path.join(M_ROOT, "./log.conf")) as conf:
    logging.config.dictConfig(json.load(conf))
    logger = logging.getLogger()


class M2:
    def list_m_modules(self):
        cmds = [
            (pl.Path(cmd).name[2:], slice(-3) if cmd.endswith(".py") else slice(999))
            for cmd in glob.glob(f"{M_ROOT}/m_*")
        ]
        cmds = [cmd[s] for (cmd, s) in cmds]
        return cmds

    def exec_m_module_command(self, m_module, sub_cmds, *args, **kwargs):
        logger.debug(f"exec_m_module_command: {args}, {kwargs}")

        assert (
            len(sub_cmds) == 1
        ), f"Only first level cmd supported for now; got {sub_cmds}"
        cmd = sub_cmds[0]
        getattr(m_module, cmd)(*args, **kwargs)

    def exec_m_modules(self, cmd, *args, **kwargs):
        cmd, *subcommands = cmd.split(".")
        cmds = self.list_m_modules()

        # cmd exist
        if cmd in cmds:
            m_module_name = f"m_{cmd}"

            cmd_module = importlib.import_module(m_module_name)
            clsmembers = inspect.getmembers(
                cmd_module,
                lambda cls: inspect.isclass(cls)
                and cls.__module__ == m_module_name
                and issubclass(cls, m_base.Base),
            )

            assert (
                len(clsmembers) == 1
            ), f"{m_module_name} exports more than 1 m_base.Base. Found {clsmembers}"

            _, cls = clsmembers[0]

            if not subcommands:
                cls().print_cmds()
            else:
                self.exec_m_module_command(cls(), subcommands, *args, **kwargs)
        else:
            logger.error(f"{cmd} not found")

    def print_m_modules(self):
        sa.print_commands(self.list_m_modules())

    def noop(self):
        """
        Noop method for speed tests
        """
        return

    def update(self, pip_install_only=False):
        """
        Updates the m tool
        """
        import subprocess
        import sys

        import fs_util
        import git_util

        if not pip_install_only:
            logger.info("updating m tool by rebasing...")
            with fs_util.Cwd(M_ROOT):
                git_util.stash()
                git_util.rebase()
                git_util.stash_pop()
                _, stdout, _ = git_util.log("--pretty=oneline --abbrev-commit -1")
                logger.info("m updated:: %s", stdout.decode("utf-8").strip())

        # also install dependency
        subprocess.check_call(
            [
                sys.executable,
                "-m",
                "pip",
                "install",
                "-r",
                os.path.join(M_ROOT, "pip-requirements.txt"),
            ]
        )


if __name__ == "__main__":
    import atexit
    import gc
    import sys

    gc.set_threshold(0)
    # Suicide immediately after other atexit functions finishes.
    # CPython will do a bunch of cleanups in Py_Finalize which
    # will again cause Copy-on-Write, including a final GC
    atexit.register(os._exit, 0)

    pos, named = sa.parse(sys.argv[1:])
    if not pos:
        sys.exit(M2().print_m_modules())
    elif pos[0] == "update":
        M2().update(*pos[1:], **named)
    else:
        M2().exec_m_modules(pos[0], *pos[1:], **named)
